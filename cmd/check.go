// Package cmd implements the command-line interface methods.
package cmd

import (
	"fmt"

	"github.com/oshokin/protolinter/internal/checker"
	"github.com/oshokin/protolinter/internal/config"
	"github.com/spf13/cobra"
)

// checkCmd represents the "check" subcommand.
var checkCmd = &cobra.Command{
	Use:   "check [files...]",
	Short: "Check protobuf files for compliance with coding conventions",
	Long: `The 'check' command analyzes the provided protobuf files to ensure they
comply with coding conventions and standards. It verifies that the files are
properly formatted and follow recommended practices.`,
	Example: "protolinter check --config=config.yaml file.proto       # Analyze a specific protobuf file",
	Args:    cobra.MinimumNArgs(1),
	Run: func(cmd *cobra.Command, files []string) {
		flags := cmd.Flags()

		configPath, _ := flags.GetString("config")
		githubURL, _ := flags.GetString("github-url")
		isMimirFile, _ := flags.GetBool("mimir")

		checker.ExecuteCheck(files, configPath, githubURL, isMimirFile)
	},
}

func init() { //nolint: gochecknoinits // Code is generated by cobra-cli.
	flags := checkCmd.Flags()
	flags.StringP("config", "c", "",
		fmt.Sprintf("path to the custom configuration file (default is '%s')",
			config.DefaultConfigName))
	flags.StringP("github-url", "g", "",
		"path to the custom file repository to replace github.com links in imported protobuf file paths.")
	flags.BoolP("mimir", "m", false,
		"path to the mimir file containing a list of paths containing protobuf files, "+
			"if this flag is set, the first file specified as an argument is expected to be the mimir file")

	rootCmd.AddCommand(checkCmd)
}
